#!/usr/bin/env bash

VERBOSE=n
INDENT_WIDTH=2
OP_PAGE_FIT=Fit
OP_OPEN_LEVEL=0
OP_USE_PAGE_LABALS=n
OP_ADD_PAGE_LABALS=y
declare -A PAGE_LABEL_NUM


# code from: https://www.unix.com/shell-programming-and-scripting/253699-fun-numbers-roman-letters-num.html
num2roman() { # NUM
# Returns NUM in roman letters
#
	input=$1	# input num
	output=""	# Clear output string
	len=${#input}	# Initial length to count down

	roman_val() { # NUM one five ten
	# This sub does the basic 'roman' algorythm
	#
		N=$1
		one=$2
		five=$3
		ten=$4
		out=""

		case $N in
		0)	out+=""	;;
		[123])	while [[ $N -gt 0 ]]
			do	out+="$one"
                ((N--))
			done
			;;
		4)	out+="$one$five"	;;
		5)	out+="$five"	;;
		[678])	out+="$five"
			N=$((N-5))
			while [[ $N -gt 0 ]]
			do	out+="$one"
                ((N--))
			done
			;;
		9)	while [[ $N -lt 10 ]]
			do	out+="$one"
                ((N++))
			done
			out+="$ten"
			;;
		esac
		echo "$out"
	}

	while [[ $len -gt 0  ]]
	do	# There are letters to add
		num=${input:0:1}
		# Do action according position
		case $len in
		1)	# 1
			output+="$(roman_val "$num" I V X)"
			;;
		2)	# 10
			output+="$(roman_val "$num" X L C)"
			;;
		3)	# 100
			output+="$(roman_val "$num" C D M)"
			;;
		*)	# 1000+
			# 10'000 gets a line above, 100'000 gets a line on the left.. how to?
			num=${input:0:(-3)}
			while [[ $num -gt 0 ]]
			do	output+="M"
				((num--))
			done

			;;
		esac
		input=${input:1} ; len=${#input}
	done
	echo "$output"
}

shopt -s extglob

function trim_trailing {
    echo "${1%%+([[:space:]])}"
}

function trim_leading {
    echo "${1##+([[:space:]])}"
}

function trim {
    #awk '{$1=$1;print}'
    trim_leading "$(trim_trailing "$1")"
}

function to_lower {
    echo "${1,,}"
}

function to_upper {
    echo "${1^^}"
}

############################################################

TMP="/tmp/BMK-$RANDOM"

function gen_temp {
    echo "$TMP-$RANDOM"
}

function clean_all_temps {
    rm -rf "$TMP"-*
}

function get_page_title {
    echo "${1%...*}"
}

function get_page_num {
    echo "${1##*...}"
}

function get_op_key {
    trim "${1%%:*}"
}

function get_op_val {
    trim "${1#*:}"
}

############################################################

function pdf_pages {
    cpdf -pages "$SRCPDF" 2>/dev/null
}

function pdf_add_page_labels {

    local args
    local output
    output="$(gen_temp).pdf"

    if [[ "$1" == Prefix:* ]]; then
        args="-label-prefix $(get_op_val "$1")"
    else
        args="-label-style $1"
    fi

    echo >&2 "CMD> cpdf --add-page-labels $SRCPDF $2-$3 $args -o $output"
    if cpdf -add-page-labels "$SRCPDF" "$2-$3" $args -o "$output"; then
        SRCPDF="$output"
    fi
}

# $1 should be a regular file, process substitution does not work
function pdf_add_bookmarks {
    local output
    output="$(gen_temp).pdf"

    echo >&2 "CMD> cpdf -add-bookmarks $1 $SRCPDF -o $output"
    if cpdf -add-bookmarks "$1" "$SRCPDF" -o "$output"; then
        SRCPDF="$output"
    fi
}

############################################################
#
function set_page_label {
    local style
    local first
    local last

    style="$(get_page_title "$1")"
    first="$(get_page_num "$1")"
    last=$2
    echo >&2 "set page label '$style' in the range [$first, $last]"

    # set page label -> page_num mapping
    local n=0
    for page in $(seq "$first" "$last"); do
        ((n++))
        case "$style" in
            LowercaseRoman)
                roman=$(num2roman $n)
                PAGE_LABEL_NUM[${roman,,}]=$page
                ;;
            UppercaseRoman)
                roman=$(num2roman $n)
                PAGE_LABEL_NUM[${roman^^}]=$page
                ;;
            DecimalArabic)
                PAGE_LABEL_NUM[$n]=$page
                ;;
            Prefix:*)
                prefix="${style#Prefix:}"
                PAGE_LABEL_NUM[$prefix$n]=$page
                ;;
            *)
                echo >&2 "ERROR Unknown page label style '$style'"
                return 1
                ;;
        esac
    done

    # run the command
    if [[ "$OP_ADD_PAGE_LABALS" == y ]]; then
        pdf_add_page_labels "$style" "$first" "$last"
    fi
}

function set_option {
    local key
    local val
    key="$(to_lower "$(get_op_key "$1")")"
    val="$(to_lower "$(get_op_val "$1")")"

    echo >&2 "set option $key: $val"

    case "$key" in
        open_level)
            OP_OPEN_LEVEL="$val"
            ;;
        use_page_labels)
            OP_USE_PAGE_LABALS="${val:0:1}"
            ;;
        add_page_labels)
            OP_ADD_PAGE_LABALS="${val:0:1}"
            ;;
        *)
            echo >&2 "ERROR Unknown option '$key'"
            return 1
            ;;
    esac
}

############################################################

#0 "Part 1 單句" 17 open "[17/Fit]"
function gen_cpdf_indicate {
    local line
    line="$(sed 's/^[ ]*//' <<< "$1")"

    local level=$(( (${#1} - ${#line}) / INDENT_WIDTH))

    local title
    title="$(get_page_title "$line")"

    local num
    num="$(get_page_num "$line")"
    if [[ "$OP_USE_PAGE_LABALS" == y ]]; then
        num="${PAGE_LABEL_NUM[$num]}"
    fi

    if [[ -z "$num" ]]; then
        echo >&2 "ERROR No page num for the bookmark '$1' (use_page_labels: $OP_USE_PAGE_LABALS)"
        return 9
    fi

    local flag
    if [[ "$level" -lt "$OP_OPEN_LEVEL" ]]; then
        flag="open"
    fi

    tee /dev/stderr <<EOT
$level "$title" $num $flag "[$num/$OP_PAGE_FIT]"
EOT
}

#___function gen_pdftk_indicate {
#___    line="$1"
#___
#___    len=${#line}
#___    line="$(sed 's/^[ ]*//' <<< "$line")"
#___    level=$((1 + (len - ${#line}) / INDENT_WIDTH))
#___    page="${line##*...}"
#___    title="${line%...*}"
#___    #echo "[$level] $title [$page]"
#___
#___    if [[ -z "$page" ]]; then
#___        echo >&2 "No the page number found in the line '$line'"
#___        return 9
#___    fi
#___
#___    cat <<EOT
#___BookmarkBegin
#___BookmarkTitle: $title
#___BookmarkLevel: $level
#___BookmarkPageNumber: $page
#___
#___EOT
#___}

# parse '  title...page'
function parse_bookmarks_ {

    local totle_pages
    totle_pages=$(pdf_pages)
    echo >&2 "Total Pages: $totle_pages"

    local section
    local page_label
    local page_num

    while IFS= read -r line; do
        line="$(trim_trailing "$line")"
        if [[ -z "$line" ||  "$line" == "#"* ]]; then
            continue
        fi

        # parse section header
        if [[ "$line" == "["* && "$line" == *"]" ]]; then
            section="${line:1:${#line}-2}"
            echo  >&2 "SECTION> $section"
            continue
        fi

        # parse the last page_label if any
        if [[ -n "$page_label" ]]; then
            [[ "$section" == page_labels ]] && page_num=$((${line##*...}-1)) || page_num=$totle_pages
            set_page_label "$page_label" "$page_num"
            page_label=
        fi

        case "$section" in
            page_labels)
                page_label="$line"  # parse it in the next run
                ;;
            options)
                set_option "$line"
                ;;
            bookmarks)
                gen_cpdf_indicate "$line"
                ;;
        esac

    done < "$1"

    # handle any left page_label
    if [[ -n "$page_label" ]]; then
        set_page_label "$page_label" "$totle_pages"
    fi

    echo >&2 "OPTION> open_label: $OP_OPEN_LEVEL"
    echo >&2 "OPTION> use_page_labels: $OP_USE_PAGE_LABALS"
    echo >&2 "OPTION> add_page_labels: $OP_ADD_PAGE_LABALS"

    echo >&2 "-----------------------------"
    for label in "${!PAGE_LABEL_NUM[@]}"; do
        num=${PAGE_LABEL_NUM[$label]}
        echo >&2 "$num: $label"
    done |& sort -n >&2
}

function parse_bookmarks {
    if [[ "$VERBOSE" == y ]]; then
        parse_bookmarks_ "$1"
    else
        parse_bookmarks_ "$1" 2>/dev/null
    fi
}

############################################################
#
if [ "$1" == "-v" ]; then
    VERBOSE=y
    shift
fi

BOOKMARKS="$1"
PDF="$2"
SRCPDF="$PDF"

if [[ -z "$BOOKMARKS" || -z "$PDF" ]]; then
    echo >&2 "usage: ${0##*/} <bookmarks> <pdf>"
    exit 1
fi

if [ ! -f "$BOOKMARKS" ]; then
    echo >&2 "BOOKMARKS not exists"
    exit 2
fi

if [ ! -f "$SRCPDF" ]; then
    echo >&2 "pdf not exists"
    exit 2
fi

#---------------------------------------------

# gen temporary bmk, since process substitution does not work here
bmk="$(gen_temp).bmk"
parse_bookmarks "$BOOKMARKS" > "$bmk" && pdf_add_bookmarks "$bmk"

# reset pdf
if [[ "$PDF" != "$SRCPDF" ]]; then
    mv "$PDF"    "${PDF%.*}.orig.pdf"
    mv "$SRCPDF" "$PDF"
fi

#clean_all_temps
